#include <utils/Types.h>

#include <algorithm>
#include <array>
#include <cmath>
#include <cstdint>
#include <iostream>
#include <utils/DataPacking.hpp>
#include <utils/join.hpp>

#include "gtest/gtest.h"

std::array<int, 300> inputMat = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,
                                 38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,
                                 76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
                                 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
                                 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
                                 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
                                 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
                                 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299};
// INT32
std::array<uint8_t, 1200> mat1 = {
    0,   0, 0, 0, 1,   0, 0, 0, 2,   0, 0, 0, 3,   0, 0, 0, 4,   0, 0, 0, 5,   0, 0, 0, 6,   0, 0, 0, 7,   0, 0, 0, 8,   0, 0, 0, 9,   0, 0, 0, 10,  0, 0, 0, 11,  0, 0, 0, 12,  0, 0, 0, 13,  0, 0, 0, 14,  0, 0, 0, 15,  0, 0, 0,
    16,  0, 0, 0, 17,  0, 0, 0, 18,  0, 0, 0, 19,  0, 0, 0, 20,  0, 0, 0, 21,  0, 0, 0, 22,  0, 0, 0, 23,  0, 0, 0, 24,  0, 0, 0, 25,  0, 0, 0, 26,  0, 0, 0, 27,  0, 0, 0, 28,  0, 0, 0, 29,  0, 0, 0, 30,  0, 0, 0, 31,  0, 0, 0,
    32,  0, 0, 0, 33,  0, 0, 0, 34,  0, 0, 0, 35,  0, 0, 0, 36,  0, 0, 0, 37,  0, 0, 0, 38,  0, 0, 0, 39,  0, 0, 0, 40,  0, 0, 0, 41,  0, 0, 0, 42,  0, 0, 0, 43,  0, 0, 0, 44,  0, 0, 0, 45,  0, 0, 0, 46,  0, 0, 0, 47,  0, 0, 0,
    48,  0, 0, 0, 49,  0, 0, 0, 50,  0, 0, 0, 51,  0, 0, 0, 52,  0, 0, 0, 53,  0, 0, 0, 54,  0, 0, 0, 55,  0, 0, 0, 56,  0, 0, 0, 57,  0, 0, 0, 58,  0, 0, 0, 59,  0, 0, 0, 60,  0, 0, 0, 61,  0, 0, 0, 62,  0, 0, 0, 63,  0, 0, 0,
    64,  0, 0, 0, 65,  0, 0, 0, 66,  0, 0, 0, 67,  0, 0, 0, 68,  0, 0, 0, 69,  0, 0, 0, 70,  0, 0, 0, 71,  0, 0, 0, 72,  0, 0, 0, 73,  0, 0, 0, 74,  0, 0, 0, 75,  0, 0, 0, 76,  0, 0, 0, 77,  0, 0, 0, 78,  0, 0, 0, 79,  0, 0, 0,
    80,  0, 0, 0, 81,  0, 0, 0, 82,  0, 0, 0, 83,  0, 0, 0, 84,  0, 0, 0, 85,  0, 0, 0, 86,  0, 0, 0, 87,  0, 0, 0, 88,  0, 0, 0, 89,  0, 0, 0, 90,  0, 0, 0, 91,  0, 0, 0, 92,  0, 0, 0, 93,  0, 0, 0, 94,  0, 0, 0, 95,  0, 0, 0,
    96,  0, 0, 0, 97,  0, 0, 0, 98,  0, 0, 0, 99,  0, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0,
    112, 0, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 127, 0, 0, 0,
    128, 0, 0, 0, 129, 0, 0, 0, 130, 0, 0, 0, 131, 0, 0, 0, 132, 0, 0, 0, 133, 0, 0, 0, 134, 0, 0, 0, 135, 0, 0, 0, 136, 0, 0, 0, 137, 0, 0, 0, 138, 0, 0, 0, 139, 0, 0, 0, 140, 0, 0, 0, 141, 0, 0, 0, 142, 0, 0, 0, 143, 0, 0, 0,
    144, 0, 0, 0, 145, 0, 0, 0, 146, 0, 0, 0, 147, 0, 0, 0, 148, 0, 0, 0, 149, 0, 0, 0, 150, 0, 0, 0, 151, 0, 0, 0, 152, 0, 0, 0, 153, 0, 0, 0, 154, 0, 0, 0, 155, 0, 0, 0, 156, 0, 0, 0, 157, 0, 0, 0, 158, 0, 0, 0, 159, 0, 0, 0,
    160, 0, 0, 0, 161, 0, 0, 0, 162, 0, 0, 0, 163, 0, 0, 0, 164, 0, 0, 0, 165, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 168, 0, 0, 0, 169, 0, 0, 0, 170, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 0, 173, 0, 0, 0, 174, 0, 0, 0, 175, 0, 0, 0,
    176, 0, 0, 0, 177, 0, 0, 0, 178, 0, 0, 0, 179, 0, 0, 0, 180, 0, 0, 0, 181, 0, 0, 0, 182, 0, 0, 0, 183, 0, 0, 0, 184, 0, 0, 0, 185, 0, 0, 0, 186, 0, 0, 0, 187, 0, 0, 0, 188, 0, 0, 0, 189, 0, 0, 0, 190, 0, 0, 0, 191, 0, 0, 0,
    192, 0, 0, 0, 193, 0, 0, 0, 194, 0, 0, 0, 195, 0, 0, 0, 196, 0, 0, 0, 197, 0, 0, 0, 198, 0, 0, 0, 199, 0, 0, 0, 200, 0, 0, 0, 201, 0, 0, 0, 202, 0, 0, 0, 203, 0, 0, 0, 204, 0, 0, 0, 205, 0, 0, 0, 206, 0, 0, 0, 207, 0, 0, 0,
    208, 0, 0, 0, 209, 0, 0, 0, 210, 0, 0, 0, 211, 0, 0, 0, 212, 0, 0, 0, 213, 0, 0, 0, 214, 0, 0, 0, 215, 0, 0, 0, 216, 0, 0, 0, 217, 0, 0, 0, 218, 0, 0, 0, 219, 0, 0, 0, 220, 0, 0, 0, 221, 0, 0, 0, 222, 0, 0, 0, 223, 0, 0, 0,
    224, 0, 0, 0, 225, 0, 0, 0, 226, 0, 0, 0, 227, 0, 0, 0, 228, 0, 0, 0, 229, 0, 0, 0, 230, 0, 0, 0, 231, 0, 0, 0, 232, 0, 0, 0, 233, 0, 0, 0, 234, 0, 0, 0, 235, 0, 0, 0, 236, 0, 0, 0, 237, 0, 0, 0, 238, 0, 0, 0, 239, 0, 0, 0,
    240, 0, 0, 0, 241, 0, 0, 0, 242, 0, 0, 0, 243, 0, 0, 0, 244, 0, 0, 0, 245, 0, 0, 0, 246, 0, 0, 0, 247, 0, 0, 0, 248, 0, 0, 0, 249, 0, 0, 0, 250, 0, 0, 0, 251, 0, 0, 0, 252, 0, 0, 0, 253, 0, 0, 0, 254, 0, 0, 0, 255, 0, 0, 0,
    0,   1, 0, 0, 1,   1, 0, 0, 2,   1, 0, 0, 3,   1, 0, 0, 4,   1, 0, 0, 5,   1, 0, 0, 6,   1, 0, 0, 7,   1, 0, 0, 8,   1, 0, 0, 9,   1, 0, 0, 10,  1, 0, 0, 11,  1, 0, 0, 12,  1, 0, 0, 13,  1, 0, 0, 14,  1, 0, 0, 15,  1, 0, 0,
    16,  1, 0, 0, 17,  1, 0, 0, 18,  1, 0, 0, 19,  1, 0, 0, 20,  1, 0, 0, 21,  1, 0, 0, 22,  1, 0, 0, 23,  1, 0, 0, 24,  1, 0, 0, 25,  1, 0, 0, 26,  1, 0, 0, 27,  1, 0, 0, 28,  1, 0, 0, 29,  1, 0, 0, 30,  1, 0, 0, 31,  1, 0, 0,
    32,  1, 0, 0, 33,  1, 0, 0, 34,  1, 0, 0, 35,  1, 0, 0, 36,  1, 0, 0, 37,  1, 0, 0, 38,  1, 0, 0, 39,  1, 0, 0, 40,  1, 0, 0, 41,  1, 0, 0, 42,  1, 0, 0, 43,  1, 0, 0};

// INT24
std::array<uint8_t, 900> mat2 = {
    0,   0, 0, 1,   0, 0, 2,   0, 0, 3,   0, 0, 4,   0, 0, 5,   0, 0, 6,   0, 0, 7,   0, 0, 8,   0, 0, 9,   0, 0, 10,  0, 0, 11,  0, 0, 12,  0, 0, 13,  0, 0, 14,  0, 0, 15,  0, 0, 16,  0, 0, 17,  0, 0, 18,  0, 0, 19,  0, 0,
    20,  0, 0, 21,  0, 0, 22,  0, 0, 23,  0, 0, 24,  0, 0, 25,  0, 0, 26,  0, 0, 27,  0, 0, 28,  0, 0, 29,  0, 0, 30,  0, 0, 31,  0, 0, 32,  0, 0, 33,  0, 0, 34,  0, 0, 35,  0, 0, 36,  0, 0, 37,  0, 0, 38,  0, 0, 39,  0, 0,
    40,  0, 0, 41,  0, 0, 42,  0, 0, 43,  0, 0, 44,  0, 0, 45,  0, 0, 46,  0, 0, 47,  0, 0, 48,  0, 0, 49,  0, 0, 50,  0, 0, 51,  0, 0, 52,  0, 0, 53,  0, 0, 54,  0, 0, 55,  0, 0, 56,  0, 0, 57,  0, 0, 58,  0, 0, 59,  0, 0,
    60,  0, 0, 61,  0, 0, 62,  0, 0, 63,  0, 0, 64,  0, 0, 65,  0, 0, 66,  0, 0, 67,  0, 0, 68,  0, 0, 69,  0, 0, 70,  0, 0, 71,  0, 0, 72,  0, 0, 73,  0, 0, 74,  0, 0, 75,  0, 0, 76,  0, 0, 77,  0, 0, 78,  0, 0, 79,  0, 0,
    80,  0, 0, 81,  0, 0, 82,  0, 0, 83,  0, 0, 84,  0, 0, 85,  0, 0, 86,  0, 0, 87,  0, 0, 88,  0, 0, 89,  0, 0, 90,  0, 0, 91,  0, 0, 92,  0, 0, 93,  0, 0, 94,  0, 0, 95,  0, 0, 96,  0, 0, 97,  0, 0, 98,  0, 0, 99,  0, 0,
    100, 0, 0, 101, 0, 0, 102, 0, 0, 103, 0, 0, 104, 0, 0, 105, 0, 0, 106, 0, 0, 107, 0, 0, 108, 0, 0, 109, 0, 0, 110, 0, 0, 111, 0, 0, 112, 0, 0, 113, 0, 0, 114, 0, 0, 115, 0, 0, 116, 0, 0, 117, 0, 0, 118, 0, 0, 119, 0, 0,
    120, 0, 0, 121, 0, 0, 122, 0, 0, 123, 0, 0, 124, 0, 0, 125, 0, 0, 126, 0, 0, 127, 0, 0, 128, 0, 0, 129, 0, 0, 130, 0, 0, 131, 0, 0, 132, 0, 0, 133, 0, 0, 134, 0, 0, 135, 0, 0, 136, 0, 0, 137, 0, 0, 138, 0, 0, 139, 0, 0,
    140, 0, 0, 141, 0, 0, 142, 0, 0, 143, 0, 0, 144, 0, 0, 145, 0, 0, 146, 0, 0, 147, 0, 0, 148, 0, 0, 149, 0, 0, 150, 0, 0, 151, 0, 0, 152, 0, 0, 153, 0, 0, 154, 0, 0, 155, 0, 0, 156, 0, 0, 157, 0, 0, 158, 0, 0, 159, 0, 0,
    160, 0, 0, 161, 0, 0, 162, 0, 0, 163, 0, 0, 164, 0, 0, 165, 0, 0, 166, 0, 0, 167, 0, 0, 168, 0, 0, 169, 0, 0, 170, 0, 0, 171, 0, 0, 172, 0, 0, 173, 0, 0, 174, 0, 0, 175, 0, 0, 176, 0, 0, 177, 0, 0, 178, 0, 0, 179, 0, 0,
    180, 0, 0, 181, 0, 0, 182, 0, 0, 183, 0, 0, 184, 0, 0, 185, 0, 0, 186, 0, 0, 187, 0, 0, 188, 0, 0, 189, 0, 0, 190, 0, 0, 191, 0, 0, 192, 0, 0, 193, 0, 0, 194, 0, 0, 195, 0, 0, 196, 0, 0, 197, 0, 0, 198, 0, 0, 199, 0, 0,
    200, 0, 0, 201, 0, 0, 202, 0, 0, 203, 0, 0, 204, 0, 0, 205, 0, 0, 206, 0, 0, 207, 0, 0, 208, 0, 0, 209, 0, 0, 210, 0, 0, 211, 0, 0, 212, 0, 0, 213, 0, 0, 214, 0, 0, 215, 0, 0, 216, 0, 0, 217, 0, 0, 218, 0, 0, 219, 0, 0,
    220, 0, 0, 221, 0, 0, 222, 0, 0, 223, 0, 0, 224, 0, 0, 225, 0, 0, 226, 0, 0, 227, 0, 0, 228, 0, 0, 229, 0, 0, 230, 0, 0, 231, 0, 0, 232, 0, 0, 233, 0, 0, 234, 0, 0, 235, 0, 0, 236, 0, 0, 237, 0, 0, 238, 0, 0, 239, 0, 0,
    240, 0, 0, 241, 0, 0, 242, 0, 0, 243, 0, 0, 244, 0, 0, 245, 0, 0, 246, 0, 0, 247, 0, 0, 248, 0, 0, 249, 0, 0, 250, 0, 0, 251, 0, 0, 252, 0, 0, 253, 0, 0, 254, 0, 0, 255, 0, 0, 0,   1, 0, 1,   1, 0, 2,   1, 0, 3,   1, 0,
    4,   1, 0, 5,   1, 0, 6,   1, 0, 7,   1, 0, 8,   1, 0, 9,   1, 0, 10,  1, 0, 11,  1, 0, 12,  1, 0, 13,  1, 0, 14,  1, 0, 15,  1, 0, 16,  1, 0, 17,  1, 0, 18,  1, 0, 19,  1, 0, 20,  1, 0, 21,  1, 0, 22,  1, 0, 23,  1, 0,
    24,  1, 0, 25,  1, 0, 26,  1, 0, 27,  1, 0, 28,  1, 0, 29,  1, 0, 30,  1, 0, 31,  1, 0, 32,  1, 0, 33,  1, 0, 34,  1, 0, 35,  1, 0, 36,  1, 0, 37,  1, 0, 38,  1, 0, 39,  1, 0, 40,  1, 0, 41,  1, 0, 42,  1, 0, 43,  1, 0};

// INT16
std::array<uint8_t, 600> mat3 = {0,   0, 1,   0, 2,   0, 3,   0, 4,   0, 5,   0, 6,   0, 7,   0, 8,   0, 9,   0, 10,  0, 11,  0, 12,  0, 13,  0, 14,  0, 15,  0, 16,  0, 17,  0, 18,  0, 19,  0, 20,  0, 21,  0, 22,  0, 23,  0, 24,  0,
                                 25,  0, 26,  0, 27,  0, 28,  0, 29,  0, 30,  0, 31,  0, 32,  0, 33,  0, 34,  0, 35,  0, 36,  0, 37,  0, 38,  0, 39,  0, 40,  0, 41,  0, 42,  0, 43,  0, 44,  0, 45,  0, 46,  0, 47,  0, 48,  0, 49,  0,
                                 50,  0, 51,  0, 52,  0, 53,  0, 54,  0, 55,  0, 56,  0, 57,  0, 58,  0, 59,  0, 60,  0, 61,  0, 62,  0, 63,  0, 64,  0, 65,  0, 66,  0, 67,  0, 68,  0, 69,  0, 70,  0, 71,  0, 72,  0, 73,  0, 74,  0,
                                 75,  0, 76,  0, 77,  0, 78,  0, 79,  0, 80,  0, 81,  0, 82,  0, 83,  0, 84,  0, 85,  0, 86,  0, 87,  0, 88,  0, 89,  0, 90,  0, 91,  0, 92,  0, 93,  0, 94,  0, 95,  0, 96,  0, 97,  0, 98,  0, 99,  0,
                                 100, 0, 101, 0, 102, 0, 103, 0, 104, 0, 105, 0, 106, 0, 107, 0, 108, 0, 109, 0, 110, 0, 111, 0, 112, 0, 113, 0, 114, 0, 115, 0, 116, 0, 117, 0, 118, 0, 119, 0, 120, 0, 121, 0, 122, 0, 123, 0, 124, 0,
                                 125, 0, 126, 0, 127, 0, 128, 0, 129, 0, 130, 0, 131, 0, 132, 0, 133, 0, 134, 0, 135, 0, 136, 0, 137, 0, 138, 0, 139, 0, 140, 0, 141, 0, 142, 0, 143, 0, 144, 0, 145, 0, 146, 0, 147, 0, 148, 0, 149, 0,
                                 150, 0, 151, 0, 152, 0, 153, 0, 154, 0, 155, 0, 156, 0, 157, 0, 158, 0, 159, 0, 160, 0, 161, 0, 162, 0, 163, 0, 164, 0, 165, 0, 166, 0, 167, 0, 168, 0, 169, 0, 170, 0, 171, 0, 172, 0, 173, 0, 174, 0,
                                 175, 0, 176, 0, 177, 0, 178, 0, 179, 0, 180, 0, 181, 0, 182, 0, 183, 0, 184, 0, 185, 0, 186, 0, 187, 0, 188, 0, 189, 0, 190, 0, 191, 0, 192, 0, 193, 0, 194, 0, 195, 0, 196, 0, 197, 0, 198, 0, 199, 0,
                                 200, 0, 201, 0, 202, 0, 203, 0, 204, 0, 205, 0, 206, 0, 207, 0, 208, 0, 209, 0, 210, 0, 211, 0, 212, 0, 213, 0, 214, 0, 215, 0, 216, 0, 217, 0, 218, 0, 219, 0, 220, 0, 221, 0, 222, 0, 223, 0, 224, 0,
                                 225, 0, 226, 0, 227, 0, 228, 0, 229, 0, 230, 0, 231, 0, 232, 0, 233, 0, 234, 0, 235, 0, 236, 0, 237, 0, 238, 0, 239, 0, 240, 0, 241, 0, 242, 0, 243, 0, 244, 0, 245, 0, 246, 0, 247, 0, 248, 0, 249, 0,
                                 250, 0, 251, 0, 252, 0, 253, 0, 254, 0, 255, 0, 0,   1, 1,   1, 2,   1, 3,   1, 4,   1, 5,   1, 6,   1, 7,   1, 8,   1, 9,   1, 10,  1, 11,  1, 12,  1, 13,  1, 14,  1, 15,  1, 16,  1, 17,  1, 18,  1,
                                 19,  1, 20,  1, 21,  1, 22,  1, 23,  1, 24,  1, 25,  1, 26,  1, 27,  1, 28,  1, 29,  1, 30,  1, 31,  1, 32,  1, 33,  1, 34,  1, 35,  1, 36,  1, 37,  1, 38,  1, 39,  1, 40,  1, 41,  1, 42,  1, 43,  1};

// INT10
std::array<uint8_t, 375> mat4 = {
    0,   4,   32,  192, 0,   4,   20,  96,  192, 1,   8,   36,  160, 192, 2,   12,  52,  224, 192, 3,   16,  68,  32,  193, 4,   20,  84,  96,  193, 5,   24,  100, 160, 193, 6,   28,  116, 224, 193, 7,   32,  132, 32,  194, 8,   36,  148,
    96,  194, 9,   40,  164, 160, 194, 10,  44,  180, 224, 194, 11,  48,  196, 32,  195, 12,  52,  212, 96,  195, 13,  56,  228, 160, 195, 14,  60,  244, 224, 195, 15,  64,  4,   33,  196, 16,  68,  20,  97,  196, 17,  72,  36,  161, 196,
    18,  76,  52,  225, 196, 19,  80,  68,  33,  197, 20,  84,  84,  97,  197, 21,  88,  100, 161, 197, 22,  92,  116, 225, 197, 23,  96,  132, 33,  198, 24,  100, 148, 97,  198, 25,  104, 164, 161, 198, 26,  108, 180, 225, 198, 27,  112,
    196, 33,  199, 28,  116, 212, 97,  199, 29,  120, 228, 161, 199, 30,  124, 244, 225, 199, 31,  128, 4,   34,  200, 32,  132, 20,  98,  200, 33,  136, 36,  162, 200, 34,  140, 52,  226, 200, 35,  144, 68,  34,  201, 36,  148, 84,  98,
    201, 37,  152, 100, 162, 201, 38,  156, 116, 226, 201, 39,  160, 132, 34,  202, 40,  164, 148, 98,  202, 41,  168, 164, 162, 202, 42,  172, 180, 226, 202, 43,  176, 196, 34,  203, 44,  180, 212, 98,  203, 45,  184, 228, 162, 203, 46,
    188, 244, 226, 203, 47,  192, 4,   35,  204, 48,  196, 20,  99,  204, 49,  200, 36,  163, 204, 50,  204, 52,  227, 204, 51,  208, 68,  35,  205, 52,  212, 84,  99,  205, 53,  216, 100, 163, 205, 54,  220, 116, 227, 205, 55,  224, 132,
    35,  206, 56,  228, 148, 99,  206, 57,  232, 164, 163, 206, 58,  236, 180, 227, 206, 59,  240, 196, 35,  207, 60,  244, 212, 99,  207, 61,  248, 228, 163, 207, 62,  252, 244, 227, 207, 63,  0,   5,   36,  208, 64,  4,   21,  100, 208,
    65,  8,   37,  164, 208, 66,  12,  53,  228, 208, 67,  16,  69,  36,  209, 68,  20,  85,  100, 209, 69,  24,  101, 164, 209, 70,  28,  117, 228, 209, 71,  32,  133, 36,  210, 72,  36,  149, 100, 210, 73,  40,  165, 164, 210, 74};

// UINT9
std::array<uint8_t, 338> mat5 = {0,   2,   8,   24,  64,  160, 128, 129, 3,   8,   18,  40,  88,  192, 160, 129, 131, 7,   16,  34,  72,  152, 64,  161, 130, 133, 11,  24,  50,  104, 216, 192, 161, 131, 135, 15,  32,  66,
                                 136, 24,  65,  162, 132, 137, 19,  40,  82,  168, 88,  193, 162, 133, 139, 23,  48,  98,  200, 152, 65,  163, 134, 141, 27,  56,  114, 232, 216, 193, 163, 135, 143, 31,  64,  130, 8,   25,
                                 66,  164, 136, 145, 35,  72,  146, 40,  89,  194, 164, 137, 147, 39,  80,  162, 72,  153, 66,  165, 138, 149, 43,  88,  178, 104, 217, 194, 165, 139, 151, 47,  96,  194, 136, 25,  67,  166,
                                 140, 153, 51,  104, 210, 168, 89,  195, 166, 141, 155, 55,  112, 226, 200, 153, 67,  167, 142, 157, 59,  120, 242, 232, 217, 195, 167, 143, 159, 63,  128, 2,   9,   26,  68,  168, 144, 161,
                                 67,  136, 18,  41,  90,  196, 168, 145, 163, 71,  144, 34,  73,  154, 68,  169, 146, 165, 75,  152, 50,  105, 218, 196, 169, 147, 167, 79,  160, 66,  137, 26,  69,  170, 148, 169, 83,  168,
                                 82,  169, 90,  197, 170, 149, 171, 87,  176, 98,  201, 154, 69,  171, 150, 173, 91,  184, 114, 233, 218, 197, 171, 151, 175, 95,  192, 130, 9,   27,  70,  172, 152, 177, 99,  200, 146, 41,
                                 91,  198, 172, 153, 179, 103, 208, 162, 73,  155, 70,  173, 154, 181, 107, 216, 178, 105, 219, 198, 173, 155, 183, 111, 224, 194, 137, 27,  71,  174, 156, 185, 115, 232, 210, 169, 91,  199,
                                 174, 157, 187, 119, 240, 226, 201, 155, 71,  175, 158, 189, 123, 248, 242, 233, 219, 199, 175, 159, 191, 127, 0,   3,   10,  28,  72,  176, 160, 193, 131, 8,   19,  42,  92,  200, 176, 161,
                                 195, 135, 16,  35,  74,  156, 72,  177, 162, 197, 139, 24,  51,  106, 220, 200, 177, 163, 199, 143, 32,  67,  138, 28,  73,  178, 164, 201, 147, 40,  83,  170, 92,  9};

// FLOAT32
std::array<uint8_t, 1200> mat6 = {
    0, 0, 0,   0,  0, 0,   128, 63, 0, 0, 0,   64, 0, 0,   64,  64, 0, 0, 128, 64, 0, 0,   160, 64, 0, 0, 192, 64, 0, 0,   224, 64, 0, 0, 0,   65, 0, 0,   16,  65, 0, 0, 32,  65, 0, 0,   48,  65, 0, 0, 64,  65, 0, 0,   80,  65,
    0, 0, 96,  65, 0, 0,   112, 65, 0, 0, 128, 65, 0, 0,   136, 65, 0, 0, 144, 65, 0, 0,   152, 65, 0, 0, 160, 65, 0, 0,   168, 65, 0, 0, 176, 65, 0, 0,   184, 65, 0, 0, 192, 65, 0, 0,   200, 65, 0, 0, 208, 65, 0, 0,   216, 65,
    0, 0, 224, 65, 0, 0,   232, 65, 0, 0, 240, 65, 0, 0,   248, 65, 0, 0, 0,   66, 0, 0,   4,   66, 0, 0, 8,   66, 0, 0,   12,  66, 0, 0, 16,  66, 0, 0,   20,  66, 0, 0, 24,  66, 0, 0,   28,  66, 0, 0, 32,  66, 0, 0,   36,  66,
    0, 0, 40,  66, 0, 0,   44,  66, 0, 0, 48,  66, 0, 0,   52,  66, 0, 0, 56,  66, 0, 0,   60,  66, 0, 0, 64,  66, 0, 0,   68,  66, 0, 0, 72,  66, 0, 0,   76,  66, 0, 0, 80,  66, 0, 0,   84,  66, 0, 0, 88,  66, 0, 0,   92,  66,
    0, 0, 96,  66, 0, 0,   100, 66, 0, 0, 104, 66, 0, 0,   108, 66, 0, 0, 112, 66, 0, 0,   116, 66, 0, 0, 120, 66, 0, 0,   124, 66, 0, 0, 128, 66, 0, 0,   130, 66, 0, 0, 132, 66, 0, 0,   134, 66, 0, 0, 136, 66, 0, 0,   138, 66,
    0, 0, 140, 66, 0, 0,   142, 66, 0, 0, 144, 66, 0, 0,   146, 66, 0, 0, 148, 66, 0, 0,   150, 66, 0, 0, 152, 66, 0, 0,   154, 66, 0, 0, 156, 66, 0, 0,   158, 66, 0, 0, 160, 66, 0, 0,   162, 66, 0, 0, 164, 66, 0, 0,   166, 66,
    0, 0, 168, 66, 0, 0,   170, 66, 0, 0, 172, 66, 0, 0,   174, 66, 0, 0, 176, 66, 0, 0,   178, 66, 0, 0, 180, 66, 0, 0,   182, 66, 0, 0, 184, 66, 0, 0,   186, 66, 0, 0, 188, 66, 0, 0,   190, 66, 0, 0, 192, 66, 0, 0,   194, 66,
    0, 0, 196, 66, 0, 0,   198, 66, 0, 0, 200, 66, 0, 0,   202, 66, 0, 0, 204, 66, 0, 0,   206, 66, 0, 0, 208, 66, 0, 0,   210, 66, 0, 0, 212, 66, 0, 0,   214, 66, 0, 0, 216, 66, 0, 0,   218, 66, 0, 0, 220, 66, 0, 0,   222, 66,
    0, 0, 224, 66, 0, 0,   226, 66, 0, 0, 228, 66, 0, 0,   230, 66, 0, 0, 232, 66, 0, 0,   234, 66, 0, 0, 236, 66, 0, 0,   238, 66, 0, 0, 240, 66, 0, 0,   242, 66, 0, 0, 244, 66, 0, 0,   246, 66, 0, 0, 248, 66, 0, 0,   250, 66,
    0, 0, 252, 66, 0, 0,   254, 66, 0, 0, 0,   67, 0, 0,   1,   67, 0, 0, 2,   67, 0, 0,   3,   67, 0, 0, 4,   67, 0, 0,   5,   67, 0, 0, 6,   67, 0, 0,   7,   67, 0, 0, 8,   67, 0, 0,   9,   67, 0, 0, 10,  67, 0, 0,   11,  67,
    0, 0, 12,  67, 0, 0,   13,  67, 0, 0, 14,  67, 0, 0,   15,  67, 0, 0, 16,  67, 0, 0,   17,  67, 0, 0, 18,  67, 0, 0,   19,  67, 0, 0, 20,  67, 0, 0,   21,  67, 0, 0, 22,  67, 0, 0,   23,  67, 0, 0, 24,  67, 0, 0,   25,  67,
    0, 0, 26,  67, 0, 0,   27,  67, 0, 0, 28,  67, 0, 0,   29,  67, 0, 0, 30,  67, 0, 0,   31,  67, 0, 0, 32,  67, 0, 0,   33,  67, 0, 0, 34,  67, 0, 0,   35,  67, 0, 0, 36,  67, 0, 0,   37,  67, 0, 0, 38,  67, 0, 0,   39,  67,
    0, 0, 40,  67, 0, 0,   41,  67, 0, 0, 42,  67, 0, 0,   43,  67, 0, 0, 44,  67, 0, 0,   45,  67, 0, 0, 46,  67, 0, 0,   47,  67, 0, 0, 48,  67, 0, 0,   49,  67, 0, 0, 50,  67, 0, 0,   51,  67, 0, 0, 52,  67, 0, 0,   53,  67,
    0, 0, 54,  67, 0, 0,   55,  67, 0, 0, 56,  67, 0, 0,   57,  67, 0, 0, 58,  67, 0, 0,   59,  67, 0, 0, 60,  67, 0, 0,   61,  67, 0, 0, 62,  67, 0, 0,   63,  67, 0, 0, 64,  67, 0, 0,   65,  67, 0, 0, 66,  67, 0, 0,   67,  67,
    0, 0, 68,  67, 0, 0,   69,  67, 0, 0, 70,  67, 0, 0,   71,  67, 0, 0, 72,  67, 0, 0,   73,  67, 0, 0, 74,  67, 0, 0,   75,  67, 0, 0, 76,  67, 0, 0,   77,  67, 0, 0, 78,  67, 0, 0,   79,  67, 0, 0, 80,  67, 0, 0,   81,  67,
    0, 0, 82,  67, 0, 0,   83,  67, 0, 0, 84,  67, 0, 0,   85,  67, 0, 0, 86,  67, 0, 0,   87,  67, 0, 0, 88,  67, 0, 0,   89,  67, 0, 0, 90,  67, 0, 0,   91,  67, 0, 0, 92,  67, 0, 0,   93,  67, 0, 0, 94,  67, 0, 0,   95,  67,
    0, 0, 96,  67, 0, 0,   97,  67, 0, 0, 98,  67, 0, 0,   99,  67, 0, 0, 100, 67, 0, 0,   101, 67, 0, 0, 102, 67, 0, 0,   103, 67, 0, 0, 104, 67, 0, 0,   105, 67, 0, 0, 106, 67, 0, 0,   107, 67, 0, 0, 108, 67, 0, 0,   109, 67,
    0, 0, 110, 67, 0, 0,   111, 67, 0, 0, 112, 67, 0, 0,   113, 67, 0, 0, 114, 67, 0, 0,   115, 67, 0, 0, 116, 67, 0, 0,   117, 67, 0, 0, 118, 67, 0, 0,   119, 67, 0, 0, 120, 67, 0, 0,   121, 67, 0, 0, 122, 67, 0, 0,   123, 67,
    0, 0, 124, 67, 0, 0,   125, 67, 0, 0, 126, 67, 0, 0,   127, 67, 0, 0, 128, 67, 0, 128, 128, 67, 0, 0, 129, 67, 0, 128, 129, 67, 0, 0, 130, 67, 0, 128, 130, 67, 0, 0, 131, 67, 0, 128, 131, 67, 0, 0, 132, 67, 0, 128, 132, 67,
    0, 0, 133, 67, 0, 128, 133, 67, 0, 0, 134, 67, 0, 128, 134, 67, 0, 0, 135, 67, 0, 128, 135, 67, 0, 0, 136, 67, 0, 128, 136, 67, 0, 0, 137, 67, 0, 128, 137, 67, 0, 0, 138, 67, 0, 128, 138, 67, 0, 0, 139, 67, 0, 128, 139, 67,
    0, 0, 140, 67, 0, 128, 140, 67, 0, 0, 141, 67, 0, 128, 141, 67, 0, 0, 142, 67, 0, 128, 142, 67, 0, 0, 143, 67, 0, 128, 143, 67, 0, 0, 144, 67, 0, 128, 144, 67, 0, 0, 145, 67, 0, 128, 145, 67, 0, 0, 146, 67, 0, 128, 146, 67,
    0, 0, 147, 67, 0, 128, 147, 67, 0, 0, 148, 67, 0, 128, 148, 67, 0, 0, 149, 67, 0, 128, 149, 67};

// Fixed<12,10>
std::array<uint8_t, 450> mat7 = {0,   64,  0,   8,   192, 0,   16,  64,  1,   24,  192, 1,   32,  64,  2,   40,  192, 2,   48,  64,  3,   56,  192, 3,   64,  64,  4,   72,  192, 4,   80,  64,  5,   88,  192, 5,   96,  64,  6,   104, 192,
                                 6,   112, 64,  7,   120, 192, 7,   128, 64,  8,   136, 192, 8,   144, 64,  9,   152, 192, 9,   160, 64,  10,  168, 192, 10,  176, 64,  11,  184, 192, 11,  192, 64,  12,  200, 192, 12,  208, 64,  13,  216,
                                 192, 13,  224, 64,  14,  232, 192, 14,  240, 64,  15,  248, 192, 15,  0,   65,  16,  8,   193, 16,  16,  65,  17,  24,  193, 17,  32,  65,  18,  40,  193, 18,  48,  65,  19,  56,  193, 19,  64,  65,  20,
                                 72,  193, 20,  80,  65,  21,  88,  193, 21,  96,  65,  22,  104, 193, 22,  112, 65,  23,  120, 193, 23,  128, 65,  24,  136, 193, 24,  144, 65,  25,  152, 193, 25,  160, 65,  26,  168, 193, 26,  176, 65,
                                 27,  184, 193, 27,  192, 65,  28,  200, 193, 28,  208, 65,  29,  216, 193, 29,  224, 65,  30,  232, 193, 30,  240, 65,  31,  248, 193, 31,  0,   66,  32,  8,   194, 32,  16,  66,  33,  24,  194, 33,  32,
                                 66,  34,  40,  194, 34,  48,  66,  35,  56,  194, 35,  64,  66,  36,  72,  194, 36,  80,  66,  37,  88,  194, 37,  96,  66,  38,  104, 194, 38,  112, 66,  39,  120, 194, 39,  128, 66,  40,  136, 194, 40,
                                 144, 66,  41,  152, 194, 41,  160, 66,  42,  168, 194, 42,  176, 66,  43,  184, 194, 43,  192, 66,  44,  200, 194, 44,  208, 66,  45,  216, 194, 45,  224, 66,  46,  232, 194, 46,  240, 66,  47,  248, 194,
                                 47,  0,   67,  48,  8,   195, 48,  16,  67,  49,  24,  195, 49,  32,  67,  50,  40,  195, 50,  48,  67,  51,  56,  195, 51,  64,  67,  52,  72,  195, 52,  80,  67,  53,  88,  195, 53,  96,  67,  54,  104,
                                 195, 54,  112, 67,  55,  120, 195, 55,  128, 67,  56,  136, 195, 56,  144, 67,  57,  152, 195, 57,  160, 67,  58,  168, 195, 58,  176, 67,  59,  184, 195, 59,  192, 67,  60,  200, 195, 60,  208, 67,  61,
                                 216, 195, 61,  224, 67,  62,  232, 195, 62,  240, 67,  63,  248, 195, 63,  0,   68,  64,  8,   196, 64,  16,  68,  65,  24,  196, 65,  32,  68,  66,  40,  196, 66,  48,  68,  67,  56,  196, 67,  64,  68,
                                 68,  72,  196, 68,  80,  68,  69,  88,  196, 69,  96,  68,  70,  104, 196, 70,  112, 68,  71,  120, 196, 71,  128, 68,  72,  136, 196, 72,  144, 68,  73,  152, 196, 73,  160, 68,  74,  168, 196, 74};

// Fixed<11,10>
std::array<uint8_t, 413> mat8 = {0,   16, 0,  1,   12,  128, 0,  5,   48, 192, 1,  16,  144, 0,  5,   44,  128, 1,  13,  112, 192, 3,  32,  16, 1,  9,   76,  128, 2,  21,  176, 192, 5,  48,  144, 1,  13,  108, 128, 3,  29,  240, 192, 7,
                                 64,  16, 2,  17,  140, 128, 4,  37,  48, 193, 9,  80,  144, 2,  21,  172, 128, 5,  45,  112, 193, 11, 96,  16, 3,  25,  204, 128, 6,  53,  176, 193, 13, 112, 144, 3,  29,  236, 128, 7,  61,  240, 193, 15,
                                 128, 16, 4,  33,  12,  129, 8,  69,  48, 194, 17, 144, 144, 4,  37,  44,  129, 9,  77,  112, 194, 19, 160, 16, 5,  41,  76,  129, 10, 85,  176, 194, 21, 176, 144, 5,  45,  108, 129, 11, 93,  240, 194, 23,
                                 192, 16, 6,  49,  140, 129, 12, 101, 48, 195, 25, 208, 144, 6,  53,  172, 129, 13, 109, 112, 195, 27, 224, 16, 7,  57,  204, 129, 14, 117, 176, 195, 29, 240, 144, 7,  61,  236, 129, 15, 125, 240, 195, 31,
                                 0,   17, 8,  65,  12,  130, 16, 133, 48, 196, 33, 16,  145, 8,  69,  44,  130, 17, 141, 112, 196, 35, 32,  17, 9,  73,  76,  130, 18, 149, 176, 196, 37, 48,  145, 9,  77,  108, 130, 19, 157, 240, 196, 39,
                                 64,  17, 10, 81,  140, 130, 20, 165, 48, 197, 41, 80,  145, 10, 85,  172, 130, 21, 173, 112, 197, 43, 96,  17, 11, 89,  204, 130, 22, 181, 176, 197, 45, 112, 145, 11, 93,  236, 130, 23, 189, 240, 197, 47,
                                 128, 17, 12, 97,  12,  131, 24, 197, 48, 198, 49, 144, 145, 12, 101, 44,  131, 25, 205, 112, 198, 51, 160, 17, 13, 105, 76,  131, 26, 213, 176, 198, 53, 176, 145, 13, 109, 108, 131, 27, 221, 240, 198, 55,
                                 192, 17, 14, 113, 140, 131, 28, 229, 48, 199, 57, 208, 145, 14, 117, 172, 131, 29, 237, 112, 199, 59, 224, 17, 15, 121, 204, 131, 30, 245, 176, 199, 61, 240, 145, 15, 125, 236, 131, 31, 253, 240, 199, 63,
                                 0,   18, 16, 129, 12,  132, 32, 5,   49, 200, 65, 16,  146, 16, 133, 44,  132, 33, 13,  113, 200, 67, 32,  18, 17, 137, 76,  132, 34, 21,  177, 200, 69, 48,  146, 17, 141, 108, 132, 35, 29,  241, 200, 71,
                                 64,  18, 18, 145, 140, 132, 36, 37,  49, 201, 73, 80,  146, 18, 149, 172, 4};

// Fixed<16,10>
std::array<uint8_t, 600> mat9 = {
    0, 0,  64, 0,  128, 0,  192, 0,  0, 1,  64, 1,  128, 1,  192, 1,  0, 2,  64, 2,  128, 2,  192, 2,  0, 3,  64, 3,  128, 3,  192, 3,  0, 4,  64, 4,  128, 4,  192, 4,  0, 5,  64, 5,  128, 5,  192, 5,  0, 6,  64, 6,  128, 6,  192, 6,
    0, 7,  64, 7,  128, 7,  192, 7,  0, 8,  64, 8,  128, 8,  192, 8,  0, 9,  64, 9,  128, 9,  192, 9,  0, 10, 64, 10, 128, 10, 192, 10, 0, 11, 64, 11, 128, 11, 192, 11, 0, 12, 64, 12, 128, 12, 192, 12, 0, 13, 64, 13, 128, 13, 192, 13,
    0, 14, 64, 14, 128, 14, 192, 14, 0, 15, 64, 15, 128, 15, 192, 15, 0, 16, 64, 16, 128, 16, 192, 16, 0, 17, 64, 17, 128, 17, 192, 17, 0, 18, 64, 18, 128, 18, 192, 18, 0, 19, 64, 19, 128, 19, 192, 19, 0, 20, 64, 20, 128, 20, 192, 20,
    0, 21, 64, 21, 128, 21, 192, 21, 0, 22, 64, 22, 128, 22, 192, 22, 0, 23, 64, 23, 128, 23, 192, 23, 0, 24, 64, 24, 128, 24, 192, 24, 0, 25, 64, 25, 128, 25, 192, 25, 0, 26, 64, 26, 128, 26, 192, 26, 0, 27, 64, 27, 128, 27, 192, 27,
    0, 28, 64, 28, 128, 28, 192, 28, 0, 29, 64, 29, 128, 29, 192, 29, 0, 30, 64, 30, 128, 30, 192, 30, 0, 31, 64, 31, 128, 31, 192, 31, 0, 32, 64, 32, 128, 32, 192, 32, 0, 33, 64, 33, 128, 33, 192, 33, 0, 34, 64, 34, 128, 34, 192, 34,
    0, 35, 64, 35, 128, 35, 192, 35, 0, 36, 64, 36, 128, 36, 192, 36, 0, 37, 64, 37, 128, 37, 192, 37, 0, 38, 64, 38, 128, 38, 192, 38, 0, 39, 64, 39, 128, 39, 192, 39, 0, 40, 64, 40, 128, 40, 192, 40, 0, 41, 64, 41, 128, 41, 192, 41,
    0, 42, 64, 42, 128, 42, 192, 42, 0, 43, 64, 43, 128, 43, 192, 43, 0, 44, 64, 44, 128, 44, 192, 44, 0, 45, 64, 45, 128, 45, 192, 45, 0, 46, 64, 46, 128, 46, 192, 46, 0, 47, 64, 47, 128, 47, 192, 47, 0, 48, 64, 48, 128, 48, 192, 48,
    0, 49, 64, 49, 128, 49, 192, 49, 0, 50, 64, 50, 128, 50, 192, 50, 0, 51, 64, 51, 128, 51, 192, 51, 0, 52, 64, 52, 128, 52, 192, 52, 0, 53, 64, 53, 128, 53, 192, 53, 0, 54, 64, 54, 128, 54, 192, 54, 0, 55, 64, 55, 128, 55, 192, 55,
    0, 56, 64, 56, 128, 56, 192, 56, 0, 57, 64, 57, 128, 57, 192, 57, 0, 58, 64, 58, 128, 58, 192, 58, 0, 59, 64, 59, 128, 59, 192, 59, 0, 60, 64, 60, 128, 60, 192, 60, 0, 61, 64, 61, 128, 61, 192, 61, 0, 62, 64, 62, 128, 62, 192, 62,
    0, 63, 64, 63, 128, 63, 192, 63, 0, 64, 64, 64, 128, 64, 192, 64, 0, 65, 64, 65, 128, 65, 192, 65, 0, 66, 64, 66, 128, 66, 192, 66, 0, 67, 64, 67, 128, 67, 192, 67, 0, 68, 64, 68, 128, 68, 192, 68, 0, 69, 64, 69, 128, 69, 192, 69,
    0, 70, 64, 70, 128, 70, 192, 70, 0, 71, 64, 71, 128, 71, 192, 71, 0, 72, 64, 72, 128, 72, 192, 72, 0, 73, 64, 73, 128, 73, 192, 73, 0, 74, 64, 74, 128, 74, 192, 74};

std::array<int, 10> inputMat1 = {1, 1, 0, 1, 0, 1, 1, 0, 0, 1};
// INT10
std::array<uint8_t, 13> mat10 = {1, 4, 0, 64, 0, 0, 4, 16, 0, 0, 0, 4, 0};

// INT8
std::array<uint8_t, 10> mat11 = {1, 1, 0, 1, 0, 1, 1, 0, 0, 1};

// BINARY
std::array<uint8_t, 2> mat12 = {107, 2};

std::array<int, 10> inputMat2 = {1, 1, -1, 1, -1, 1, 1, -1, -1, 1};
// INT8
std::array<uint8_t, 10> mat13 = {1, 1, 255, 1, 255, 1, 1, 255, 255, 1};

// BIPOLAR
std::array<uint8_t, 2> mat14 = {107, 2};

std::array<int, 10> inputMat3 = {-1, -1, -1, 1, 1, 0, 0, -1, 0, 0};
// TERNARY
std::array<uint8_t, 3> mat15 = {127, 193, 0};

std::array<uint8_t, 256> inputMat4 = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                                      37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                                      74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                                      111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
                                      148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
                                      185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                                      222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
// UINT8
std::array<uint8_t, 256> mat16 = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                                  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                                  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                                  111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
                                  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
                                  185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                                  222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};

// INT8
std::array<uint8_t, 256> mat17 = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                                  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                                  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                                  111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
                                  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
                                  185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                                  222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};

std::array<int8_t, 256> inputMat5 = {0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,  30,  31,
                                     32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,  62,  63,
                                     64,   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,  94,  95,
                                     96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125, 126, 127,
                                     -128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97,
                                     -96,  -95,  -94,  -93,  -92,  -91,  -90,  -89,  -88,  -87,  -86,  -85,  -84,  -83,  -82,  -81,  -80,  -79,  -78,  -77,  -76,  -75,  -74,  -73,  -72,  -71,  -70,  -69,  -68,  -67, -66, -65,
                                     -64,  -63,  -62,  -61,  -60,  -59,  -58,  -57,  -56,  -55,  -54,  -53,  -52,  -51,  -50,  -49,  -48,  -47,  -46,  -45,  -44,  -43,  -42,  -41,  -40,  -39,  -38,  -37,  -36,  -35, -34, -33,
                                     -32,  -31,  -30,  -29,  -28,  -27,  -26,  -25,  -24,  -23,  -22,  -21,  -20,  -19,  -18,  -17,  -16,  -15,  -14,  -13,  -12,  -11,  -10,  -9,   -8,   -7,   -6,   -5,   -4,   -3,  -2,  -1};
// UINT8
std::array<uint8_t, 256> mat18 = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                                  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                                  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                                  111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
                                  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
                                  185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                                  222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};

// INT8
std::array<uint8_t, 256> mat19 = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                                  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                                  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                                  111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
                                  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
                                  185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                                  222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};

std::array<double, 256> inputMat6 = {0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,   10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,
                                     32.,  33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,
                                     64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,
                                     96.,  97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124., 125., 126., 127.,
                                     128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159.,
                                     160., 161., 162., 163., 164., 165., 166., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191.,
                                     192., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223.,
                                     224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255.};
// UINT8
std::array<uint8_t, 256> mat20 = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                                  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                                  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                                  111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
                                  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
                                  185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                                  222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};

// INT9
std::array<uint8_t, 288> mat21 = {0,   2,   8,   24, 64, 160, 128, 129, 3,   8,   18,  40,  88, 192, 160, 129, 131, 7,   16,  34,  72,  152, 64, 161, 130, 133, 11,  24,  50,  104, 216, 192, 161, 131, 135, 15,
                                  32,  66,  136, 24, 65, 162, 132, 137, 19,  40,  82,  168, 88, 193, 162, 133, 139, 23,  48,  98,  200, 152, 65, 163, 134, 141, 27,  56,  114, 232, 216, 193, 163, 135, 143, 31,
                                  64,  130, 8,   25, 66, 164, 136, 145, 35,  72,  146, 40,  89, 194, 164, 137, 147, 39,  80,  162, 72,  153, 66, 165, 138, 149, 43,  88,  178, 104, 217, 194, 165, 139, 151, 47,
                                  96,  194, 136, 25, 67, 166, 140, 153, 51,  104, 210, 168, 89, 195, 166, 141, 155, 55,  112, 226, 200, 153, 67, 167, 142, 157, 59,  120, 242, 232, 217, 195, 167, 143, 159, 63,
                                  128, 2,   9,   26, 68, 168, 144, 161, 67,  136, 18,  41,  90, 196, 168, 145, 163, 71,  144, 34,  73,  154, 68, 169, 146, 165, 75,  152, 50,  105, 218, 196, 169, 147, 167, 79,
                                  160, 66,  137, 26, 69, 170, 148, 169, 83,  168, 82,  169, 90, 197, 170, 149, 171, 87,  176, 98,  201, 154, 69, 171, 150, 173, 91,  184, 114, 233, 218, 197, 171, 151, 175, 95,
                                  192, 130, 9,   27, 70, 172, 152, 177, 99,  200, 146, 41,  91, 198, 172, 153, 179, 103, 208, 162, 73,  155, 70, 173, 154, 181, 107, 216, 178, 105, 219, 198, 173, 155, 183, 111,
                                  224, 194, 137, 27, 71, 174, 156, 185, 115, 232, 210, 169, 91, 199, 174, 157, 187, 119, 240, 226, 201, 155, 71, 175, 158, 189, 123, 248, 242, 233, 219, 199, 175, 159, 191, 127};

std::array<double, 256> inputMat7 = {
    2.5000e-01, 1.2500e+00, 2.2500e+00, 3.2500e+00, 4.2500e+00, 5.2500e+00, 6.2500e+00, 7.2500e+00, 8.2500e+00, 9.2500e+00, 1.0250e+01, 1.1250e+01, 1.2250e+01, 1.3250e+01, 1.4250e+01, 1.5250e+01, 1.6250e+01, 1.7250e+01, 1.8250e+01,
    1.9250e+01, 2.0250e+01, 2.1250e+01, 2.2250e+01, 2.3250e+01, 2.4250e+01, 2.5250e+01, 2.6250e+01, 2.7250e+01, 2.8250e+01, 2.9250e+01, 3.0250e+01, 3.1250e+01, 3.2250e+01, 3.3250e+01, 3.4250e+01, 3.5250e+01, 3.6250e+01, 3.7250e+01,
    3.8250e+01, 3.9250e+01, 4.0250e+01, 4.1250e+01, 4.2250e+01, 4.3250e+01, 4.4250e+01, 4.5250e+01, 4.6250e+01, 4.7250e+01, 4.8250e+01, 4.9250e+01, 5.0250e+01, 5.1250e+01, 5.2250e+01, 5.3250e+01, 5.4250e+01, 5.5250e+01, 5.6250e+01,
    5.7250e+01, 5.8250e+01, 5.9250e+01, 6.0250e+01, 6.1250e+01, 6.2250e+01, 6.3250e+01, 6.4250e+01, 6.5250e+01, 6.6250e+01, 6.7250e+01, 6.8250e+01, 6.9250e+01, 7.0250e+01, 7.1250e+01, 7.2250e+01, 7.3250e+01, 7.4250e+01, 7.5250e+01,
    7.6250e+01, 7.7250e+01, 7.8250e+01, 7.9250e+01, 8.0250e+01, 8.1250e+01, 8.2250e+01, 8.3250e+01, 8.4250e+01, 8.5250e+01, 8.6250e+01, 8.7250e+01, 8.8250e+01, 8.9250e+01, 9.0250e+01, 9.1250e+01, 9.2250e+01, 9.3250e+01, 9.4250e+01,
    9.5250e+01, 9.6250e+01, 9.7250e+01, 9.8250e+01, 9.9250e+01, 1.0025e+02, 1.0125e+02, 1.0225e+02, 1.0325e+02, 1.0425e+02, 1.0525e+02, 1.0625e+02, 1.0725e+02, 1.0825e+02, 1.0925e+02, 1.1025e+02, 1.1125e+02, 1.1225e+02, 1.1325e+02,
    1.1425e+02, 1.1525e+02, 1.1625e+02, 1.1725e+02, 1.1825e+02, 1.1925e+02, 1.2025e+02, 1.2125e+02, 1.2225e+02, 1.2325e+02, 1.2425e+02, 1.2525e+02, 1.2625e+02, 1.2725e+02, 1.2825e+02, 1.2925e+02, 1.3025e+02, 1.3125e+02, 1.3225e+02,
    1.3325e+02, 1.3425e+02, 1.3525e+02, 1.3625e+02, 1.3725e+02, 1.3825e+02, 1.3925e+02, 1.4025e+02, 1.4125e+02, 1.4225e+02, 1.4325e+02, 1.4425e+02, 1.4525e+02, 1.4625e+02, 1.4725e+02, 1.4825e+02, 1.4925e+02, 1.5025e+02, 1.5125e+02,
    1.5225e+02, 1.5325e+02, 1.5425e+02, 1.5525e+02, 1.5625e+02, 1.5725e+02, 1.5825e+02, 1.5925e+02, 1.6025e+02, 1.6125e+02, 1.6225e+02, 1.6325e+02, 1.6425e+02, 1.6525e+02, 1.6625e+02, 1.6725e+02, 1.6825e+02, 1.6925e+02, 1.7025e+02,
    1.7125e+02, 1.7225e+02, 1.7325e+02, 1.7425e+02, 1.7525e+02, 1.7625e+02, 1.7725e+02, 1.7825e+02, 1.7925e+02, 1.8025e+02, 1.8125e+02, 1.8225e+02, 1.8325e+02, 1.8425e+02, 1.8525e+02, 1.8625e+02, 1.8725e+02, 1.8825e+02, 1.8925e+02,
    1.9025e+02, 1.9125e+02, 1.9225e+02, 1.9325e+02, 1.9425e+02, 1.9525e+02, 1.9625e+02, 1.9725e+02, 1.9825e+02, 1.9925e+02, 2.0025e+02, 2.0125e+02, 2.0225e+02, 2.0325e+02, 2.0425e+02, 2.0525e+02, 2.0625e+02, 2.0725e+02, 2.0825e+02,
    2.0925e+02, 2.1025e+02, 2.1125e+02, 2.1225e+02, 2.1325e+02, 2.1425e+02, 2.1525e+02, 2.1625e+02, 2.1725e+02, 2.1825e+02, 2.1925e+02, 2.2025e+02, 2.2125e+02, 2.2225e+02, 2.2325e+02, 2.2425e+02, 2.2525e+02, 2.2625e+02, 2.2725e+02,
    2.2825e+02, 2.2925e+02, 2.3025e+02, 2.3125e+02, 2.3225e+02, 2.3325e+02, 2.3425e+02, 2.3525e+02, 2.3625e+02, 2.3725e+02, 2.3825e+02, 2.3925e+02, 2.4025e+02, 2.4125e+02, 2.4225e+02, 2.4325e+02, 2.4425e+02, 2.4525e+02, 2.4625e+02,
    2.4725e+02, 2.4825e+02, 2.4925e+02, 2.5025e+02, 2.5125e+02, 2.5225e+02, 2.5325e+02, 2.5425e+02, 2.5525e+02};

// FLOAT32
std::array<uint8_t, 1024> mat22 = {
    0, 0,   128, 62, 0, 0,   160, 63, 0, 0,   16,  64, 0, 0,   80,  64, 0, 0,   136, 64, 0, 0,   168, 64, 0, 0,   200, 64, 0, 0,   232, 64, 0, 0,   4,   65, 0, 0,   20,  65, 0, 0,   36,  65, 0, 0,   52,  65, 0, 0,   68,  65,
    0, 0,   84,  65, 0, 0,   100, 65, 0, 0,   116, 65, 0, 0,   130, 65, 0, 0,   138, 65, 0, 0,   146, 65, 0, 0,   154, 65, 0, 0,   162, 65, 0, 0,   170, 65, 0, 0,   178, 65, 0, 0,   186, 65, 0, 0,   194, 65, 0, 0,   202, 65,
    0, 0,   210, 65, 0, 0,   218, 65, 0, 0,   226, 65, 0, 0,   234, 65, 0, 0,   242, 65, 0, 0,   250, 65, 0, 0,   1,   66, 0, 0,   5,   66, 0, 0,   9,   66, 0, 0,   13,  66, 0, 0,   17,  66, 0, 0,   21,  66, 0, 0,   25,  66,
    0, 0,   29,  66, 0, 0,   33,  66, 0, 0,   37,  66, 0, 0,   41,  66, 0, 0,   45,  66, 0, 0,   49,  66, 0, 0,   53,  66, 0, 0,   57,  66, 0, 0,   61,  66, 0, 0,   65,  66, 0, 0,   69,  66, 0, 0,   73,  66, 0, 0,   77,  66,
    0, 0,   81,  66, 0, 0,   85,  66, 0, 0,   89,  66, 0, 0,   93,  66, 0, 0,   97,  66, 0, 0,   101, 66, 0, 0,   105, 66, 0, 0,   109, 66, 0, 0,   113, 66, 0, 0,   117, 66, 0, 0,   121, 66, 0, 0,   125, 66, 0, 128, 128, 66,
    0, 128, 130, 66, 0, 128, 132, 66, 0, 128, 134, 66, 0, 128, 136, 66, 0, 128, 138, 66, 0, 128, 140, 66, 0, 128, 142, 66, 0, 128, 144, 66, 0, 128, 146, 66, 0, 128, 148, 66, 0, 128, 150, 66, 0, 128, 152, 66, 0, 128, 154, 66,
    0, 128, 156, 66, 0, 128, 158, 66, 0, 128, 160, 66, 0, 128, 162, 66, 0, 128, 164, 66, 0, 128, 166, 66, 0, 128, 168, 66, 0, 128, 170, 66, 0, 128, 172, 66, 0, 128, 174, 66, 0, 128, 176, 66, 0, 128, 178, 66, 0, 128, 180, 66,
    0, 128, 182, 66, 0, 128, 184, 66, 0, 128, 186, 66, 0, 128, 188, 66, 0, 128, 190, 66, 0, 128, 192, 66, 0, 128, 194, 66, 0, 128, 196, 66, 0, 128, 198, 66, 0, 128, 200, 66, 0, 128, 202, 66, 0, 128, 204, 66, 0, 128, 206, 66,
    0, 128, 208, 66, 0, 128, 210, 66, 0, 128, 212, 66, 0, 128, 214, 66, 0, 128, 216, 66, 0, 128, 218, 66, 0, 128, 220, 66, 0, 128, 222, 66, 0, 128, 224, 66, 0, 128, 226, 66, 0, 128, 228, 66, 0, 128, 230, 66, 0, 128, 232, 66,
    0, 128, 234, 66, 0, 128, 236, 66, 0, 128, 238, 66, 0, 128, 240, 66, 0, 128, 242, 66, 0, 128, 244, 66, 0, 128, 246, 66, 0, 128, 248, 66, 0, 128, 250, 66, 0, 128, 252, 66, 0, 128, 254, 66, 0, 64,  0,   67, 0, 64,  1,   67,
    0, 64,  2,   67, 0, 64,  3,   67, 0, 64,  4,   67, 0, 64,  5,   67, 0, 64,  6,   67, 0, 64,  7,   67, 0, 64,  8,   67, 0, 64,  9,   67, 0, 64,  10,  67, 0, 64,  11,  67, 0, 64,  12,  67, 0, 64,  13,  67, 0, 64,  14,  67,
    0, 64,  15,  67, 0, 64,  16,  67, 0, 64,  17,  67, 0, 64,  18,  67, 0, 64,  19,  67, 0, 64,  20,  67, 0, 64,  21,  67, 0, 64,  22,  67, 0, 64,  23,  67, 0, 64,  24,  67, 0, 64,  25,  67, 0, 64,  26,  67, 0, 64,  27,  67,
    0, 64,  28,  67, 0, 64,  29,  67, 0, 64,  30,  67, 0, 64,  31,  67, 0, 64,  32,  67, 0, 64,  33,  67, 0, 64,  34,  67, 0, 64,  35,  67, 0, 64,  36,  67, 0, 64,  37,  67, 0, 64,  38,  67, 0, 64,  39,  67, 0, 64,  40,  67,
    0, 64,  41,  67, 0, 64,  42,  67, 0, 64,  43,  67, 0, 64,  44,  67, 0, 64,  45,  67, 0, 64,  46,  67, 0, 64,  47,  67, 0, 64,  48,  67, 0, 64,  49,  67, 0, 64,  50,  67, 0, 64,  51,  67, 0, 64,  52,  67, 0, 64,  53,  67,
    0, 64,  54,  67, 0, 64,  55,  67, 0, 64,  56,  67, 0, 64,  57,  67, 0, 64,  58,  67, 0, 64,  59,  67, 0, 64,  60,  67, 0, 64,  61,  67, 0, 64,  62,  67, 0, 64,  63,  67, 0, 64,  64,  67, 0, 64,  65,  67, 0, 64,  66,  67,
    0, 64,  67,  67, 0, 64,  68,  67, 0, 64,  69,  67, 0, 64,  70,  67, 0, 64,  71,  67, 0, 64,  72,  67, 0, 64,  73,  67, 0, 64,  74,  67, 0, 64,  75,  67, 0, 64,  76,  67, 0, 64,  77,  67, 0, 64,  78,  67, 0, 64,  79,  67,
    0, 64,  80,  67, 0, 64,  81,  67, 0, 64,  82,  67, 0, 64,  83,  67, 0, 64,  84,  67, 0, 64,  85,  67, 0, 64,  86,  67, 0, 64,  87,  67, 0, 64,  88,  67, 0, 64,  89,  67, 0, 64,  90,  67, 0, 64,  91,  67, 0, 64,  92,  67,
    0, 64,  93,  67, 0, 64,  94,  67, 0, 64,  95,  67, 0, 64,  96,  67, 0, 64,  97,  67, 0, 64,  98,  67, 0, 64,  99,  67, 0, 64,  100, 67, 0, 64,  101, 67, 0, 64,  102, 67, 0, 64,  103, 67, 0, 64,  104, 67, 0, 64,  105, 67,
    0, 64,  106, 67, 0, 64,  107, 67, 0, 64,  108, 67, 0, 64,  109, 67, 0, 64,  110, 67, 0, 64,  111, 67, 0, 64,  112, 67, 0, 64,  113, 67, 0, 64,  114, 67, 0, 64,  115, 67, 0, 64,  116, 67, 0, 64,  117, 67, 0, 64,  118, 67,
    0, 64,  119, 67, 0, 64,  120, 67, 0, 64,  121, 67, 0, 64,  122, 67, 0, 64,  123, 67, 0, 64,  124, 67, 0, 64,  125, 67, 0, 64,  126, 67, 0, 64,  127, 67};

// Fixed<16,10>
std::array<uint8_t, 512> mat23 = {16, 0,  80, 0,  144, 0,  208, 0,  16, 1,  80, 1,  144, 1,  208, 1,  16, 2,  80, 2,  144, 2,  208, 2,  16, 3,  80, 3,  144, 3,  208, 3,  16, 4,  80, 4,  144, 4,  208, 4,  16, 5,  80, 5,  144, 5,  208, 5,
                                  16, 6,  80, 6,  144, 6,  208, 6,  16, 7,  80, 7,  144, 7,  208, 7,  16, 8,  80, 8,  144, 8,  208, 8,  16, 9,  80, 9,  144, 9,  208, 9,  16, 10, 80, 10, 144, 10, 208, 10, 16, 11, 80, 11, 144, 11, 208, 11,
                                  16, 12, 80, 12, 144, 12, 208, 12, 16, 13, 80, 13, 144, 13, 208, 13, 16, 14, 80, 14, 144, 14, 208, 14, 16, 15, 80, 15, 144, 15, 208, 15, 16, 16, 80, 16, 144, 16, 208, 16, 16, 17, 80, 17, 144, 17, 208, 17,
                                  16, 18, 80, 18, 144, 18, 208, 18, 16, 19, 80, 19, 144, 19, 208, 19, 16, 20, 80, 20, 144, 20, 208, 20, 16, 21, 80, 21, 144, 21, 208, 21, 16, 22, 80, 22, 144, 22, 208, 22, 16, 23, 80, 23, 144, 23, 208, 23,
                                  16, 24, 80, 24, 144, 24, 208, 24, 16, 25, 80, 25, 144, 25, 208, 25, 16, 26, 80, 26, 144, 26, 208, 26, 16, 27, 80, 27, 144, 27, 208, 27, 16, 28, 80, 28, 144, 28, 208, 28, 16, 29, 80, 29, 144, 29, 208, 29,
                                  16, 30, 80, 30, 144, 30, 208, 30, 16, 31, 80, 31, 144, 31, 208, 31, 16, 32, 80, 32, 144, 32, 208, 32, 16, 33, 80, 33, 144, 33, 208, 33, 16, 34, 80, 34, 144, 34, 208, 34, 16, 35, 80, 35, 144, 35, 208, 35,
                                  16, 36, 80, 36, 144, 36, 208, 36, 16, 37, 80, 37, 144, 37, 208, 37, 16, 38, 80, 38, 144, 38, 208, 38, 16, 39, 80, 39, 144, 39, 208, 39, 16, 40, 80, 40, 144, 40, 208, 40, 16, 41, 80, 41, 144, 41, 208, 41,
                                  16, 42, 80, 42, 144, 42, 208, 42, 16, 43, 80, 43, 144, 43, 208, 43, 16, 44, 80, 44, 144, 44, 208, 44, 16, 45, 80, 45, 144, 45, 208, 45, 16, 46, 80, 46, 144, 46, 208, 46, 16, 47, 80, 47, 144, 47, 208, 47,
                                  16, 48, 80, 48, 144, 48, 208, 48, 16, 49, 80, 49, 144, 49, 208, 49, 16, 50, 80, 50, 144, 50, 208, 50, 16, 51, 80, 51, 144, 51, 208, 51, 16, 52, 80, 52, 144, 52, 208, 52, 16, 53, 80, 53, 144, 53, 208, 53,
                                  16, 54, 80, 54, 144, 54, 208, 54, 16, 55, 80, 55, 144, 55, 208, 55, 16, 56, 80, 56, 144, 56, 208, 56, 16, 57, 80, 57, 144, 57, 208, 57, 16, 58, 80, 58, 144, 58, 208, 58, 16, 59, 80, 59, 144, 59, 208, 59,
                                  16, 60, 80, 60, 144, 60, 208, 60, 16, 61, 80, 61, 144, 61, 208, 61, 16, 62, 80, 62, 144, 62, 208, 62, 16, 63, 80, 63, 144, 63, 208, 63};

TEST(DataPacking, IntInputTest) {
    std::array<int, 300> inputM = {};
    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    auto ret = Finn::pack<Finn::DatatypeInt<32>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat1.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat1.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeInt<24>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat2.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat2.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeInt<16>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat3.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat3.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeInt<10>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat4.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat4.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeUInt<9>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat5.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat5.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeFloat>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat6.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat6.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeFixed<12, 10>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat7.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat7.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeFixed<11, 10>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat8.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat8.begin()));

    std::copy(inputMat.begin(), inputMat.end(), inputM.begin());
    ret = Finn::pack<Finn::DatatypeFixed<16, 10>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat9.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat9.begin()));

    // inputMat1

    ret = Finn::pack<Finn::DatatypeInt<10>>(inputMat1.begin(), inputMat1.end());
    EXPECT_TRUE(mat10.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat10.begin()));

    ret = Finn::pack<Finn::DatatypeInt<8>>(inputMat1.begin(), inputMat1.end());
    EXPECT_TRUE(mat11.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat11.begin()));

    ret = Finn::pack<Finn::DatatypeBinary>(inputMat1.begin(), inputMat1.end());
    EXPECT_TRUE(mat12.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat12.begin()));

    // inputMat2

    ret = Finn::pack<Finn::DatatypeInt<8>>(inputMat2.begin(), inputMat2.end());
    EXPECT_TRUE(mat13.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat13.begin()));

    ret = Finn::pack<Finn::DatatypeBipolar>(inputMat2.begin(), inputMat2.end());
    EXPECT_TRUE(mat14.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat14.begin()));

    // inputMat3

    ret = Finn::pack<Finn::DatatypeTernary>(inputMat3.begin(), inputMat3.end());
    EXPECT_TRUE(mat15.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat15.begin()));
}

TEST(DataPacking, Uint8InputTest) {
    auto ret = Finn::pack<Finn::DatatypeUInt<8>>(inputMat4.begin(), inputMat4.end());
    EXPECT_TRUE(mat16.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat16.begin()));

    Finn::vector<uint8_t> tmp(inputMat4.begin(), inputMat4.end());
    ret = Finn::pack<Finn::DatatypeUInt<8>>(tmp);
    EXPECT_TRUE(mat16.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat16.begin()));

    ret = Finn::pack<Finn::DatatypeInt<8>>(inputMat4.begin(), inputMat4.end());
    EXPECT_TRUE(mat17.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat17.begin()));

    Finn::vector<uint8_t> tmp2(inputMat4.begin(), inputMat4.end());
    ret = Finn::pack<Finn::DatatypeInt<8>>(tmp2);
    EXPECT_TRUE(mat17.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat17.begin()));
}


TEST(DataPacking, Int8InputTest) {
    auto ret = Finn::pack<Finn::DatatypeUInt<8>>(inputMat5.begin(), inputMat5.end());
    EXPECT_TRUE(mat18.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat18.begin()));

    Finn::vector<int8_t> tmp(inputMat5.begin(), inputMat5.end());
    ret = Finn::pack<Finn::DatatypeUInt<8>>(tmp);
    EXPECT_TRUE(mat18.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat18.begin()));

    ret = Finn::pack<Finn::DatatypeInt<8>>(inputMat5.begin(), inputMat5.end());
    EXPECT_TRUE(mat19.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat19.begin()));

    Finn::vector<int8_t> tmp2(inputMat5.begin(), inputMat5.end());
    ret = Finn::pack<Finn::DatatypeInt<8>>(tmp2);
    EXPECT_TRUE(mat19.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat19.begin()));
}

TEST(DataPacking, FloatingPointInputTest) {
    auto ret = Finn::pack<Finn::DatatypeUInt<8>>(inputMat6.begin(), inputMat6.end());
    EXPECT_TRUE(mat20.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat20.begin()));

    ret = Finn::pack<Finn::DatatypeInt<9>>(inputMat6.begin(), inputMat6.end());
    EXPECT_TRUE(mat21.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat21.begin()));

    std::array<double, 256> inputM = {};
    std::copy(inputMat7.begin(), inputMat7.end(), inputM.begin());

    ret = Finn::pack<Finn::DatatypeFloat>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat22.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat22.begin()));

    ret = Finn::pack<Finn::DatatypeFixed<16, 10>>(inputM.begin(), inputM.end());
    EXPECT_TRUE(mat23.size() == ret.size() && std::equal(ret.begin(), ret.end(), mat23.begin()));
}

TEST(DataPacking, IntegralToBitsetTest) {
    Finn::vector<uint8_t> inp = {0, 1, 2, 3, 4, 5, 6, 7};
    auto ret = Finn::toBitset<Finn::DatatypeUInt<3>, true, false>(inp);
    Finn::vector<uint8_t> retElems;
    std::transform(ret.begin(), ret.end(), std::back_inserter(retElems), [](const std::bitset<3>& bit) { return bit.to_ulong(); });
    EXPECT_TRUE(inp.size() == retElems.size() && std::equal(inp.begin(), inp.end(), retElems.begin()));

    inp = {0, 1};
    ret = Finn::toBitset<Finn::DatatypeUInt<3>, true, true>(inp);
    Finn::vector<uint8_t> groundTruth = {0, 4};
    retElems.clear();
    std::transform(ret.begin(), ret.end(), std::back_inserter(retElems), [](const std::bitset<3>& bit) { return bit.to_ulong(); });
    EXPECT_EQ(groundTruth, retElems);

    Finn::vector<int8_t> inp2 = {2, 3, -2, -3};
    ret = Finn::toBitset<Finn::DatatypeInt<3>, true, true>(inp2);
    groundTruth = {2, 6, 3, 5};
    retElems.clear();
    std::transform(ret.begin(), ret.end(), std::back_inserter(retElems), [](const std::bitset<3>& bit) { return bit.to_ulong(); });
    EXPECT_EQ(groundTruth, retElems);
}

TEST(DataPacking, MergeBitsets) {
    Finn::vector<uint8_t> inp = {0, 1, 2, 3, 4, 5, 6, 7};
    auto ret = Finn::toBitset<Finn::DatatypeUInt<3>, true, false>(inp);
    auto ret2 = Finn::mergeBitsets<Finn::DatatypeUInt<3>>(ret);
    EXPECT_STREQ(ret2.to_string().c_str(), "111110101100011010001000");
    auto ret4bit = Finn::toBitset<Finn::DatatypeUInt<4>, true, false>(inp);
    ret2 = Finn::mergeBitsets<Finn::DatatypeUInt<4>>(ret4bit);
    EXPECT_STREQ(ret2.to_string().c_str(), "01110110010101000011001000010000");

    Finn::vector<int64_t> inp64 = {0, 1, 2, 3, 4, 5, 6, 7};
    ret = Finn::toBitset<Finn::DatatypeUInt<3>, true, false>(inp64);
    ret2 = Finn::mergeBitsets<Finn::DatatypeUInt<3>>(ret);
    EXPECT_STREQ(ret2.to_string().c_str(), "111110101100011010001000");
    ret4bit = Finn::toBitset<Finn::DatatypeUInt<4>, true, false>(inp64);
    ret2 = Finn::mergeBitsets<Finn::DatatypeUInt<4>>(ret4bit);
    EXPECT_STREQ(ret2.to_string().c_str(), "01110110010101000011001000010000");
    auto ret9bit = Finn::toBitset<Finn::DatatypeUInt<9>, true, false>(inp64);
    ret2 = Finn::mergeBitsets<Finn::DatatypeUInt<9>>(ret9bit);
    EXPECT_STREQ(ret2.to_string().c_str(), "000000111000000110000000101000000100000000011000000010000000001000000000");

    Finn::vector<int64_t> inp64s = {0, -1, -2, -3, 4, 5, 6, 7};
    auto rets = Finn::toBitset<Finn::DatatypeInt<4>, true, false>(inp64s);
    ret2 = Finn::mergeBitsets<Finn::DatatypeInt<4>>(rets);
    EXPECT_STREQ(ret2.to_string().c_str(), "01110110010101001101111011110000");
}

TEST(DataPacking, BitsetToByteVector) {
    Finn::vector<uint8_t> inp = {0, 1, 2, 3, 4, 5, 6, 7};
    auto ret = Finn::toBitset<Finn::DatatypeUInt<3>, true, false>(inp);
    auto ret2 = Finn::mergeBitsets<Finn::DatatypeUInt<3>>(ret);
    auto ret3 = Finn::bitsetToByteVector<uint8_t>(ret2);
    Finn::vector<uint8_t> base = {136, 198, 250};
    EXPECT_EQ(base, ret3);
}


TEST(DataPacking, DynamicBitsetParallel) {
    DynamicBitset bit(128);
#pragma omp parallel for schedule(guided) reduction(Finn::bitsetOR : bit) default(none)
    for (std::size_t i = 0; i < bit.size(); ++i) {
        bit.setSingleBit(i);
    }
    EXPECT_TRUE(bit.all());
}

TEST(DataPacking, UnpackingWrongSize) {
    Finn::vector<uint8_t> inp(20, 0);
    EXPECT_THROW((Finn::unpack<Finn::DatatypeUInt<7>, uint64_t>(inp)), std::runtime_error);
    EXPECT_NO_THROW((Finn::unpack<Finn::DatatypeUInt<1>, uint32_t>(inp)));
}

TEST(DataPacking, UnpackingUnsignedTypes) {
    Finn::vector<uint8_t> inp(20, 0);
    std::iota(inp.begin(), inp.end(), 0);
    auto ret = Finn::unpack<Finn::DatatypeUInt<8>>(inp);
    EXPECT_EQ(inp, ret);

    Finn::vector<uint16_t> inp2(inp.begin(), inp.end());
    auto ret2 = Finn::unpack<Finn::DatatypeUInt<8>, uint16_t>(inp);
    EXPECT_EQ(inp2, ret2);

    Finn::vector<uint32_t> inp3(inp.begin(), inp.end());
    auto ret3 = Finn::unpack<Finn::DatatypeUInt<8>, uint32_t>(inp);
    EXPECT_EQ(inp3, ret3);

    Finn::vector<uint8_t> inp64(24, 0);
    std::iota(inp64.begin(), inp64.end(), 0);
    Finn::vector<uint64_t> inp4(inp64.begin(), inp64.end());
    auto ret4 = Finn::unpack<Finn::DatatypeUInt<8>, uint64_t>(inp64);
    EXPECT_EQ(inp4, ret4);

    Finn::vector<uint8_t> inp16 = {0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 1, 0};
    auto ret16 = Finn::unpack<Finn::DatatypeUInt<16>>(inp16);
    Finn::vector<uint16_t> base16 = {0, 256, 512, 768, 1024, 1280, 1536, 1};
    EXPECT_EQ(base16, ret16);

    Finn::vector<uint8_t> inp32 = {0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 1, 0, 0};
    auto ret32 = Finn::unpack<Finn::DatatypeUInt<32>>(inp32);
    Finn::vector<uint32_t> base32 = {0, 33554433, 196608, 1024, 100663301, 256};
    EXPECT_EQ(ret32, base32);

    auto ret10 = Finn::unpack<Finn::DatatypeUInt<10>>(inp);
    Finn::vector<uint16_t> base10 = {256, 128, 48, 16, 517, 449, 128, 36, 778, 770, 208, 56, 15, 68, 289, 76};
    EXPECT_EQ(base10, ret10);
}

TEST(DataPacking, UnpackingSignedTypes) {
    Finn::vector<uint8_t> inp = {21, 68, 255, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    Finn::vector<int8_t> int8 = {21, 68, -1, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    Finn::vector<int16_t> int16 = {17429, -32513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    Finn::vector<int32_t> int24 = {-48107, 128, 0, 0, 0, 0, 0, 0};
    Finn::vector<int32_t> int32 = {-2130754539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    Finn::vector<int64_t> int64 = {2164212757, 0, 0, 0, 0, 0, 0, 0};

    auto retInt8 = Finn::unpack<Finn::DatatypeInt<8>>(inp);
    EXPECT_EQ(retInt8, int8);
    auto retInt16 = Finn::unpack<Finn::DatatypeInt<16>>(inp);
    EXPECT_EQ(retInt16, int16);
    Finn::vector<uint8_t> inp1(inp.begin(), inp.begin() + 24);
    auto retInt24 = Finn::unpack<Finn::DatatypeInt<24>>(inp1);
    EXPECT_EQ(retInt24, int24);
    auto retInt32 = Finn::unpack<Finn::DatatypeInt<32>>(inp);
    EXPECT_EQ(retInt32, int32);
    auto retInt64 = Finn::unpack<Finn::DatatypeInt<64>>(inp);
    EXPECT_EQ(retInt64, int64);
    Finn::vector<uint8_t> inp10(20, 0);
    std::iota(inp10.begin(), inp10.end(), 0);
    Finn::vector<int16_t> base10 = {256, 128, 48, 16, -507, 449, 128, 36, -246, -254, 208, 56, 15, 68, 289, 76};
    auto ret10 = Finn::unpack<Finn::DatatypeInt<10>>(inp10);
    EXPECT_EQ(base10, ret10);
}

template<typename T>
bool approxEqual(const T& lhs, const T& rhs) {
    constexpr float epsilon = 0.0015f;
    return std::abs(lhs - rhs) <= epsilon;
}


TEST(DataPacking, UnpackingFixedPointTypes) {
    Finn::vector<uint8_t> inp = {21, 68, 255, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    auto retFloat = Finn::unpack<Finn::DatatypeFixed<16, 10>>(inp);
    Finn::vector<float> base1610 = {272.328, -508.016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    EXPECT_TRUE(retFloat.size() == base1610.size());
    std::vector<bool> ans;
    std::transform(retFloat.begin(), retFloat.end(), base1610.begin(), std::back_inserter(ans), approxEqual<float>);
    EXPECT_TRUE(std::all_of(ans.begin(), ans.end(), [](const auto& elem) { return elem; }));
    retFloat = Finn::unpack<Finn::DatatypeFixed<16, 12>, float>(inp);
    Finn::vector<float> base1612 = {1089.3125, -2032.0625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    ans.clear();
    EXPECT_TRUE(retFloat.size() == base1612.size());
    std::transform(retFloat.begin(), retFloat.end(), base1612.begin(), std::back_inserter(ans), approxEqual<float>);
    EXPECT_TRUE(std::all_of(ans.begin(), ans.end(), [](const auto& elem) { return elem; }));
    Finn::vector<uint8_t> inp10(20, 0);
    std::iota(inp10.begin(), inp10.end(), 0);
    Finn::vector<float> base10 = {8.0, 4.0, 1.5, 0.5, -15.84375, 14.03125, 4.0, 1.125, -7.6875, -7.9375, 6.5, 1.75, 0.46875, 2.125, 9.03125, 2.375};
    auto ret10 = Finn::unpack<Finn::DatatypeFixed<10, 5>, float>(inp10);
    ans.clear();
    EXPECT_TRUE(ret10.size() == base10.size());
    std::transform(ret10.begin(), ret10.end(), base10.begin(), std::back_inserter(ans), approxEqual<float>);
    EXPECT_TRUE(std::all_of(ans.begin(), ans.end(), [](const auto& elem) { return elem; }));
}

TEST(DataPacking, UnpackingFloatTypes) {
    Finn::vector<uint8_t> inp(mat22.begin(), mat22.end());
    auto retFloat = Finn::unpack<Finn::DatatypeFloat>(inp);
    Finn::vector<float> base(inputMat7.begin(), inputMat7.end());
    EXPECT_EQ(retFloat, base);
}


int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}